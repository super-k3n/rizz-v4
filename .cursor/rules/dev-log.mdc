---
description: 実装ログ管理のためのガイドライン
globs: 
alwaysApply: false
---
# 開発ログ維持ガイドライン

## 目的

このルールは、Rizzプロジェクト開発において実装の進捗、決定事項、変更点を追跡するための構造化された開発ログ（`dev-logs`ディレクトリ。例: `250416-1.md`）を維持するためのガイドラインを提供します。

## 開発ログの構造

開発ログはプロジェクトのルートに`dev-logs`として維持し、以下の構造に従うべきです：

# Rizz 開発ログ

このドキュメントはRizzプロジェクト開発における実装の進捗、決定事項、変更点を追跡します。

## 実装タイムライン

### YYYY-MM-DD - タスクの説明

**タスク参照:** [チェックリストからのタスクID]

**実装詳細:**
- 作成/変更されたファイル
- 重要な決定事項
- 実装アプローチ
- 遭遇した課題と解決策

**コード変更:**
```typescript
// 重要なコード変更または例
```

## ログ更新プロセス

1. 各実装タスク（「Rizz 実装チェックリスト」の項目）を完了した後、`dev-logs`ディレクトリ内にファイルを作成
2. 現在の日付とタスクの説明を含む新しいエントリを追加します。
3. 以下を文書化します：
   - チェックリストからのタスクIDへの参照
   - 作成または変更されたファイル
   - 重要な実装の決定事項
   - 遭遇した課題とその解決方法
   - 重要なコード例（該当する場合）
4. 実装チェックリストで対応するタスクを完了としてマークします。

## ログエントリの例
[250416-3.md](mdc:context/dev-logs/250416-3.md).md を参照。


## 開発ログを維持する利点

- 実装履歴の明確な文書化を提供
- チームメンバー間の知識移転を促進
- 新しい開発者のオンボーディングを支援
- デバッグや実装決定の理解のための参考資料として機能
- レトロスペクティブや進捗追跡のためのプロジェクトタイムラインを作成

## 関連ドキュメント

- [Rizz 実装チェックリスト](mdc:Rizz%20実装チェックリスト) - 実装チェックリスト参照
- [技術スタック定義書](mdc:Rizz%20技術スタック定義書) - 技術仕様